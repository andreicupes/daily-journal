import React, { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";

const prompts = {
    reflection: [
        "What is something you’re grateful for today?",
        "Describe a moment this week that made you feel alive.",
        "What lesson did you learn recently that surprised you?",
        "Write about a challenge you’ve overcome and what it taught you.",
        "What does balance mean in your life right now?"
    ],
    creativity: [
        "Write a story that begins with a strange sound in the distance.",
        "Invent a new holiday and describe how it’s celebrated.",
        "Create a character who can only speak in riddles.",
        "Imagine waking up in a different time period — where are you?",
        "Describe a world where dreams come to life."
    ],
    mindfulness: [
        "List five things you can see, four you can touch, three you can hear, two you can smell, and one you can taste.",
        "What are three deep breaths teaching you right now?",
        "Describe the way your body feels in this moment.",
        "Write about a peaceful place in your mind.",
        "Reflect on your current emotional state without judgment."
    ],
    storytelling: [
        "Write about a moment that changed everything.",
        "Tell a story from the perspective of your future self.",
        "Describe an unexpected friendship.",
        "Write a short story based on a memory — real or imagined.",
        "Narrate a day in the life of an inanimate object."
    ],
    personalGrowth: [
        "What are you most proud of yourself for?",
        "Write a letter to your younger self.",
        "What fear would you like to overcome this year?",
        "What does success mean to you?",
        "How do you define your purpose in life?"
    ]
};

const PromptCard = ({ prompt }) => ( <
    Card className = "mb-6 shadow-lg border-l-4 border-indigo-500" >
    <
    CardContent className = "p-6 text-lg font-medium text-indigo-800 bg-indigo-50 rounded-xl" > { prompt } <
    /CardContent> < /
    Card >
);

export default function DailyPrompt() {
    const [selectedCategory, setSelectedCategory] = useState("reflection");
    const [currentIndex, setCurrentIndex] = useState(0);
    const [journalText, setJournalText] = useState("");
    const [entries, setEntries] = useState([]);
    const [editingIndex, setEditingIndex] = useState(null);

    const promptsInCategory = prompts[selectedCategory];
    const currentPrompt = promptsInCategory[currentIndex];

    const handleNextPrompt = () => {
        setCurrentIndex((prev) => (prev + 1) % promptsInCategory.length);
        setJournalText("");
        setEditingIndex(null);
    };

    const handleSaveEntry = () => {
        if (journalText.trim()) {
            let updated;
            if (editingIndex !== null) {
                updated = entries.map((entry, idx) =>
                    idx === editingIndex ? {...entry, text: journalText } : entry
                );
            } else {
                updated = [
                    ...entries,
                    {
                        prompt: currentPrompt,
                        text: journalText,
                        date: new Date().toLocaleString()
                    }
                ];
            }
            setEntries(updated);
            localStorage.setItem("journalEntries", JSON.stringify(updated));
            setJournalText("");
            setEditingIndex(null);
        }
    };

    const handleEditEntry = (index) => {
        setJournalText(entries[index].text);
        setEditingIndex(index);
    };

    useEffect(() => {
        const saved = localStorage.getItem("journalEntries");
        if (saved) {
            setEntries(JSON.parse(saved));
        }
    }, []);

    return ( <
        div className = "max-w-4xl mx-auto px-6 py-10 font-sans" >
        <
        h1 className = "text-5xl font-extrabold text-center text-indigo-700 mb-4" > 📝Daily Prompt < /h1> <
        p className = "text-center text-muted-foreground text-lg mb-10" >
        A minimalist archive of inspiration
        for journaling, self - discovery, and creativity. <
        /p>

        <
        Tabs value = { selectedCategory }
        onValueChange = { setSelectedCategory }
        className = "mb-6" >
        <
        TabsList className = "flex flex-wrap justify-center gap-3" >
        <
        TabsTrigger value = "reflection" > Reflection < /TabsTrigger> <
        TabsTrigger value = "creativity" > Creativity < /TabsTrigger> <
        TabsTrigger value = "mindfulness" > Mindfulness < /TabsTrigger> <
        TabsTrigger value = "storytelling" > Storytelling < /TabsTrigger> <
        TabsTrigger value = "personalGrowth" > Growth < /TabsTrigger> < /
        TabsList > <
        /Tabs>

        <
        PromptCard prompt = { currentPrompt }
        />

        <
        Textarea className = "w-full mt-2 min-h-[140px] text-base border-2 border-indigo-300 rounded-xl"
        placeholder = "Start writing your thoughts here..."
        value = { journalText }
        onChange = {
            (e) => setJournalText(e.target.value)
        }
        />

        <
        div className = "flex justify-end gap-2 mt-4" >
        <
        Button variant = "secondary"
        onClick = { handleNextPrompt } > Next Prompt < /Button> <
        Button onClick = { handleSaveEntry } > { editingIndex !== null ? "Update Entry" : "Save Entry" } < /Button> < /
        div >

        {
            entries.length > 0 && ( <
                div className = "mt-14" >
                <
                h2 className = "text-3xl font-bold text-indigo-600 mb-6" > 🗂️Journal Archive < /h2> <
                div className = "grid gap-6" > {
                    entries.map((entry, idx) => ( <
                        Card key = { idx }
                        className = "bg-white shadow-md border-l-4 border-indigo-400" >
                        <
                        CardContent className = "p-5" >
                        <
                        p className = "text-sm text-muted-foreground mb-2" > { entry.date } < /p> <
                        p className = "font-semibold mb-2" > Prompt: < span className = "text-indigo-700" > { entry.prompt } < /span></p >
                        <
                        p className = "text-gray-700 whitespace-pre-wrap mb-4" > { entry.text } < /p> <
                        Button variant = "outline"
                        onClick = {
                            () => handleEditEntry(idx)
                        } > Edit < /Button> < /
                        CardContent > <
                        /Card>
                    ))
                } <
                /div> < /
                div >
            )
        } <
        /div>
    );
}